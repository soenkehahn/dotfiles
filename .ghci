-- cabal macros file
import           Data.Char
import           System.Directory
import           System.Environment
import           System.Exit
import           System.Process
:{
let strip :: String -> String
    strip = reverse . dropWhile isSpace . reverse . dropWhile isSpace

    cabalMacrosCmd :: IO String
    cabalMacrosCmd = do
      ghciExists <- doesFileExist ".ghci"
      if ghciExists
        then return "" -- assuming that the existing .ghci file will set this properly
        else do
          withStack <- maybe False (const True) <$> lookupEnv "STACK_EXE"
          if withStack
            then do
              distDir <- strip <$> readProcess "stack" (words "path --dist-dir") ""
              let cabalMacrosFile = distDir ++ "/build/autogen/cabal_macros.h"
              exists <- doesFileExist cabalMacrosFile
              if exists
                then return $ ":set -optP-include -optP" ++ cabalMacrosFile
                else die ("cannot find " ++ cabalMacrosFile ++ "\ntry: stack build")
            else do
              cabalDistExists <- doesDirectoryExist "dist"
              return $ if cabalDistExists
                then ":set -optP-include -optPdist/build/autogen/cabal_macros.h"
                else ""
:}
:cmd cabalMacrosCmd

import Control.Monad
:{
let changeDotGhciPermissions = do
      exists <- doesFileExist ".ghci"
      when exists $
        callCommand "chmod go-w .ghci ."
:}
changeDotGhciPermissions

-- some packages use this for custom header files (for CPP)
:set -optP-I -optPinclude

-- include usual source directories
:set -itest -isrc

:set -fdefer-typed-holes
:set -fno-warn-unused-binds

:set prompt "Î»> "
