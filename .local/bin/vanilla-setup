#!/usr/bin/env stack
{-
stack script
--resolver lts-13.26 --install-ghc
--package base
--package getopt-generics
--package directory
--package shake
--package filepath
-}

{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}

import Data.Maybe
import Control.Monad
import WithCli
import System.Directory
import System.Environment
import Development.Shake hiding (doesDirectoryExist)
import System.FilePath

data Args = Args {
  testWatch :: Bool
} deriving (Generic, HasArguments)

main :: IO ()
main = withCli run

run :: String -> Args -> IO ()
run name args =
  if testWatch args
    then runTestWatch name
    else setup name

repos :: [(String, Maybe String)]
repos =
  ("vanilla-haskell", Nothing) :
  ("vanilla-typescript", Just "node") :
  ("vanilla-typescript", Just "node-koa") :
  ("vanilla-typescript", Just "react") :
  []

mkDirName :: (String, Maybe String) -> String
mkDirName (repo, branch) = case branch of
  Nothing -> repo
  Just branch -> repo ++ "-" ++ branch

setup :: String -> IO ()
setup name = do
  exists <- doesDirectoryExist name
  when exists $ do
    error (name ++ " does exist")
  createDirectory name
  forM_ repos $ \ (repo, branch) -> do
    unit $ cmd (Cwd name)
      "git clone"
        ("git@github.com:soenkehahn/" ++ repo)
        "--branch" (fromMaybe "master" branch)
        (mkDirName (repo, branch))
    unit $ cmd (Cwd (name </> mkDirName (repo, branch))) "just"

runTestWatch :: String -> IO ()
runTestWatch name = do
  forM_ repos $ \ (repo, branch) -> do
    unit $ cmd (Cwd (name </> mkDirName (repo, branch)))
      ["konsole", "-e", "just watch"]
