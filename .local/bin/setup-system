#!/usr/bin/env stack
{-
stack script
--resolver lts-18.23 --install-ghc
  --package directory
  --package filepath
  --package getopt-generics
  --package logging-facade
  --package MissingH
  --package mockery
  --package safe
  --package shake
  --package split
-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE ViewPatterns #-}
{-# OPTIONS_GHC -Wall -Werror #-}

import Control.Arrow
import Control.Monad
import Data.List
import Data.List.Split
import Data.Maybe
import Development.Shake hiding (doesFileExist, getEnv)
import Safe
import System.Directory (setCurrentDirectory)
import System.Environment
import System.Exit
import System.FilePath
import qualified System.Logging.Facade as Log
import Test.Mockery.Directory
import WithCli

data Args = Args
  deriving (Generic)

instance HasArguments Args

main :: IO ()
main = withCli $ \ Args -> do
  homeDir <- getEnv "HOME"
  setCurrentDirectory homeDir
  buildNixExecutables homeDir
  upgradeStack
  installAptPackages
  installRustExecutables
  installPythonExecutables
  installStarship
  installAsTree
  updateFlatpak

buildNixExecutables :: FilePath -> IO ()
buildNixExecutables homeDir = do
  unit $
    cmd
      (Cwd (homeDir </> ".local/shahn_nix_executables"))
      "./build.sh"

upgradeStack :: IO ()
upgradeStack = do
  unit $ cmd "stack upgrade"

installAptPackages :: IO ()
installAptPackages = do
  installedPackages <- getInstalledPackages
  case (packages \\ installedPackages) of
    [] -> return ()
    toBeInstalled -> do
      Log.info ("installing " ++ unwords toBeInstalled)
      unit $ cmd "sudo apt-get install -y" toBeInstalled
  where
    packages :: [String]
    packages =
      "apt-file" :
      "arandr" :
      "atool" :
      "automake" :
      "beets" :
      "brightnessctl" :
      "build-essential" :
      "chromium-browser" :
      "cmake" :
      "cups" :
      "deborphan" :
      "dos2unix" :
      "dosbox" :
      "entr" :
      "epiphany-browser" :
      "fatsort" :
      "firefox" :
      "flatpak" :
      "fzf" :
      "gdebi" :
      "geeqie" :
      "gimp" :
      "gist" :
      "git" :
      "git-cola" :
      "gitg" :
      "gitk" :
      "gnome-terminal" :
      "golang" :
      "gparted" :
      "graphviz" :
      "grim" :
      "handbrake" :
      "htop" :
      "i3" :
      "i3lock" :
      "inkscape" :
      "inotify-tools" :
      "iotop" :
      "jnettop" :
      "jq" :
      "kanshi" :
      "kcolorchooser" :
      "kig" :
      "kmag" :
      "krita" :
      "kruler" :
      "krusader" :
      "libiw-dev" :
      "librsvg2-bin" :
      "libssl-dev" :
      "libtool-bin" :
      "libx11-dev" :
      "libx11-protocol-other-perl" :
      "libx11-windowhierarchy-perl" :
      "libxcb-render0-dev" :
      "libxcb-shape0-dev" :
      "libxcb-xfixes0-dev" :
      "libxext-dev" :
      "libxft-dev" :
      "libxinerama-dev" :
      "libxpm-dev" :
      "libxrandr-dev" :
      "libxss-dev" :
      "lxde" :
      "m4" :
      "mako-notifier" :
      "meld" :
      "mercurial" :
      "mhwaveedit" :
      "mkvtoolnix" :
      "mosh" :
      "mplayer" :
      "nethogs" :
      "net-tools" :
      "numlockx" :
      "okteta" :
      "okular" :
      "openssh-server" :
      "openvpn" :
      "parallel" :
      "pavucontrol" :
      "pdftk-java" :
      "php-cli" :
      "postgresql-client" :
      "powertop" :
      "pulsemixer" :
      "pv" :
      "pwgen" :
      "python3-pip" :
      "rar" :
      "redis" :
      "redshift" :
      "renameutils" :
      "ri-li" :
      "rofi" :
      "rtorrent" :
      "screen" :
      "sgt-puzzles" :
      "sloccount" :
      "slurp" :
      "smplayer" :
      "sonata" :
      "sox" :
      "sshfs" :
      "stellarium" :
      "sway" :
      "swaybg" :
      "swaylock" :
      "tig" :
      "tmux" :
      "tree" :
      "unison-gtk" :
      "upx-ucl" :
      "vagrant" :
      "vim" :
      "virtualbox" :
      "vlc" :
      "wajig" :
      "waybar" :
      "whois" :
      "wl-clipboard" :
      "xclip" :
      "xloadimage" :
      "xmonad" :
      "xsel" :
      "xtail" :
      "zlib1g-dev" :
      "zsh" :
      []

getInstalledPackages :: IO [String]
getInstalledPackages = do
  Stdout output <- cmd "dpkg -l"
  return $ parse output
  where
    parse =
      lines
        >>> map (stripPrefix "ii  ")
        >>> catMaybes
        >>> map (splitOneOf " :" >>> headMay)
        >>> catMaybes

installRustExecutables :: IO ()
installRustExecutables = do
  forM_ rustExecutables $ \executable -> do
    putStrLn ("installing " ++ executable ++ "...")
    unit $ cmd "cargo install" executable

rustExecutables :: [String]
rustExecutables =
  "alacritty" :
  "bottom" :
  "cargo-audit" :
  "cargo-deps" :
  "cargo-edit" :
  "cargo-expand" :
  "cargo-geiger" :
  "cargo-lichking" :
  "cargo-outdated" :
  "cargo-udeps" :
  "cargo-watch" :
  "cargo-whatfeatures" :
  "choose" :
  "clog-cli" :
  "du-dust":
  "jless" :
  "just" :
  "lsd" :
  "rust-script" :
  "sd" :
  "tracetree" :
  []

installPythonExecutables :: IO ()
installPythonExecutables = do
  (Stderr(_ :: String), Exit(_)) <- cmd "python3 -m keyring --disable"
  forM_ packages $ \ package -> do
    unit $ cmd "pip3 install --user" package
  where
    packages =
      -- "base16-shell-preview" :
      "neovim-remote" :
      "yq" :
      []

installStarship :: IO ()
installStarship = do
  Exit exitCode <- cmd "which starship"
  when (exitCode /= ExitSuccess) $ do
    Stdout(script) <- cmd "curl -fsSL https://starship.rs/install.sh"
    cmd "sh -s -- --yes" (Stdin script)

installAsTree :: IO ()
installAsTree = do
  Exit status <- cmd "which as-tree"
  when (status /= ExitSuccess) $ do
    inTempDirectory $ do
      cmd_ "wget" "https://github.com/jez/as-tree/releases/download/0.12.0/as-tree-0.12.0-linux.zip"
      cmd_ "aunpack" "as-tree-0.12.0-linux.zip"
      cmd_ "cp as-tree ~/.local/bin/as-tree" Shell

updateFlatpak :: IO ()
updateFlatpak = do
  cmd_ "flatpak update"
