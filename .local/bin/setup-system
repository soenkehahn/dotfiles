#!/usr/bin/env stack
{-
stack script
--resolver lts-18.23 --install-ghc
  --package base
  --package directory
  --package filepath
  --package getopt-generics
  --package logging-facade
  --package safe
  --package shake
  --package split
-}

{-# LANGUAGE DeriveGeneric #-}
{-# OPTIONS_GHC -Wall -Werror #-}

import Control.Arrow
import Data.List
import Data.List.Split
import Data.Maybe
import Development.Shake hiding (doesFileExist, getEnv)
import Safe
import qualified System.Logging.Facade as Log
import WithCli

data Args = Args
  deriving (Generic)

instance HasArguments Args

main :: IO ()
main = withCli $ \ Args -> do
  putStrLn "apt..."
  installAptPackages
  putStrLn "home-manager..."
  cmd_ "home-manager -L build"
  cmd_ "home-manager -L switch"
  putStrLn "peck..."
  cmd_ "peck"

installAptPackages :: IO ()
installAptPackages = do
  installedPackages <- getInstalledPackages
  case (packages \\ installedPackages) of
    [] -> return ()
    toBeInstalled -> do
      Log.info ("installing " ++ unwords toBeInstalled)
      unit $ cmd "sudo apt-get install -y" toBeInstalled
  where
    packages :: [String]
    packages =
      "apt-file" :
      "arandr" :
      "atool" :
      "automake" :
      "beets" :
      "brightnessctl" :
      "build-essential" :
      "chromium-browser" :
      "cmake" :
      "cups" :
      "deborphan" :
      "dos2unix" :
      "dosbox" :
      "entr" :
      "epiphany-browser" :
      "fatsort" :
      "flatpak" :
      "fzf" :
      "gdebi" :
      "geeqie" :
      "gimp" :
      "gist" :
      "git" :
      "git-cola" :
      "gitg" :
      "gitk" :
      "gnome-terminal" :
      "gparted" :
      "graphviz" :
      "grim" :
      "handbrake" :
      "htop" :
      "i3" :
      "i3lock" :
      "inkscape" :
      "inotify-tools" :
      "iotop" :
      "jnettop" :
      "kanshi" :
      "kcolorchooser" :
      "kig" :
      "kmag" :
      "krita" :
      "kruler" :
      "krusader" :
      "libiw-dev" :
      "librsvg2-bin" :
      "libssl-dev" :
      "libtool-bin" :
      "libx11-dev" :
      "libx11-protocol-other-perl" :
      "libx11-windowhierarchy-perl" :
      "libxcb-render0-dev" :
      "libxcb-shape0-dev" :
      "libxcb-xfixes0-dev" :
      "libxext-dev" :
      "libxft-dev" :
      "libxinerama-dev" :
      "libxpm-dev" :
      "libxrandr-dev" :
      "libxss-dev" :
      "lxde" :
      "m4" :
      "meld" :
      "mercurial" :
      "mhwaveedit" :
      "mkvtoolnix" :
      "mosh" :
      "mplayer" :
      "nethogs" :
      "net-tools" :
      "numlockx" :
      "okteta" :
      "okular" :
      "openssh-server" :
      "openvpn" :
      "parallel" :
      "pavucontrol" :
      "pdftk-java" :
      "php-cli" :
      "postgresql-client" :
      "powertop" :
      "pulsemixer" :
      "pv" :
      "pwgen" :
      "python3-pip" :
      "ranger" :
      "rar" :
      "redis" :
      "redshift" :
      "renameutils" :
      "ri-li" :
      "rofi" :
      "rtorrent" :
      "screen" :
      "sloccount" :
      "slurp" :
      "smplayer" :
      "sonata" :
      "sox" :
      "sshfs" :
      "swaybg" :
      "swaylock" :
      "tig" :
      "tmux" :
      "tree" :
      "unison-gtk" :
      "upx-ucl" :
      "vim" :
      "virtualbox" :
      "vlc" :
      "wajig" :
      "waybar" :
      "whois" :
      "wl-clipboard" :
      "xclip" :
      "xloadimage" :
      "xmonad" :
      "xsel" :
      "xtail" :
      "zlib1g-dev" :
      "zsh" :
      []

getInstalledPackages :: IO [String]
getInstalledPackages = do
  Stdout output <- cmd "dpkg -l"
  return $ parse output
  where
    parse =
      lines
        >>> map (stripPrefix "ii  ")
        >>> catMaybes
        >>> map (splitOneOf " :" >>> headMay)
        >>> catMaybes
