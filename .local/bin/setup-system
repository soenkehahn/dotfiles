#!/usr/bin/env stack
{-
stack runghc
--resolver lts-8.3 --install-ghc
  --package logging-facade
  --package split
  --package shake
  --package safe
  --package MissingH
-}
{-# OPTIONS_GHC -Wall -Werror #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE ScopedTypeVariables #-}

import Control.Arrow
import Control.Monad
import Data.List
import Data.List.Split
import Data.Maybe
import Data.String.Utils
import Development.Shake hiding (doesFileExist, getEnv)
import Safe
import System.Directory
import System.Environment
import System.Exit
import qualified System.Logging.Facade as Log

main :: IO ()
main = do
  homeDir <- getEnv "HOME"
  setCurrentDirectory homeDir
  upgradeStack
  installAptPackages
  installXMonad
  installCustom
  installSlack

upgradeStack :: IO ()
upgradeStack = do
  unit $ cmd "stack upgrade"

installSlack :: IO ()
installSlack = do
  let version = "3.0.5"
  (Exit ec, Stdout (_ :: String)) <- cmd "which slack"
  isUpToDate <-
    case ec of
      ExitFailure _ -> return False
      ExitSuccess -> do
        Stdout (strip -> currentVersion) <- cmd "slack --version"
        return $
          case currentVersion of
            v | v == version -> True
            _ -> False
  when (not isUpToDate) $ do
    unit $
      cmd
        [Cwd "/tmp"]
        "wget"
        ("https://downloads.slack-edge.com/linux_releases/slack-desktop-" ++ version ++ "-amd64.deb")
    unit $
      cmd
        [Cwd "/tmp"]
        "sudo gdebi --non-interactive"
        ("slack-desktop-" ++ version ++ "-amd64.deb")

installAptPackages :: IO ()
installAptPackages = do
  installedPackages <- getInstalledPackages
  case (packages \\ installedPackages) of
    [] -> return ()
    toBeInstalled -> do
      Log.info ("installing " ++ unwords toBeInstalled)
      unit $ cmd "sudo apt-get install -y" toBeInstalled

installXMonad :: IO ()
installXMonad = do
  unit $ cmd (Cwd ".xmonad") "stack setup"
  unit $ cmd (Cwd ".xmonad") "stack install xmobar"
  unit $ cmd (Cwd ".xmonad") "stack build --only-dependencies"
  unit $ cmd (Cwd ".xmonad") "make -f geany"

packages :: [String]
packages =
  "apt-file" :
  "arandr" :
  "atool" :
  "automake" :
  "build-essential" :
  "chromium-browser" :
  "cmake" :
  "cups" :
  "deborphan" :
  "dolphin" :
  "dos2unix" :
  "dosbox" :
  "entr" :
  "epiphany-browser" :
  "fatsort" :
  "firefox" :
  "gdebi" :
  "geeqie" :
  "gimp" :
  "gist" :
  "git" :
  "git-cola" :
  "gitk" :
  "gnupg-agent" :
  "gparted" :
  "graphviz" :
  "handbrake" :
  "htop" :
  "i3lock" :
  "inkscape" :
  "inotify-tools" :
  "iotop" :
  "jnettop" :
  "jq" :
  "kcolorchooser" :
  "kde-baseapps-bin" :
  "kig" :
  "konsole" :
  "krita" :
  "kruler" :
  "krusader" :
  "libiw-dev" :
  "libtool-bin" :
  "libx11-dev" :
  "libx11-protocol-other-perl" :
  "libx11-windowhierarchy-perl" :
  "libxext-dev" :
  "libxft-dev" :
  "libxinerama-dev" :
  "libxpm-dev" :
  "libxrandr-dev" :
  "libxss-dev" :
  "lxde" :
  "m4" :
  "meld" :
  "mercurial" :
  "mhwaveedit" :
  "mkvtoolnix" :
  "mosh" :
  "mplayer" :
  "nethogs" :
  "net-tools" :
  "npm" :
  "numlockx" :
  "okteta" :
  "okular" :
  "openjdk-8-jdk" :
  "openssh-server" :
  "openvpn" :
  "pavucontrol" :
  "pdftk" :
  "pm-utils" :
  "postgresql-client-9.6" :
  "postgresql-client-common" :
  "powertop" :
  "pv" :
  "pwgen" :
  "python-pip" :
  "redshift" :
  "renameutils" :
  "ri-li" :
  "rtorrent" :
  "screen" :
  "sgt-puzzles" :
  "silversearcher-ag" :
  "sloccount" :
  "smplayer" :
  "sonata" :
  "sox" :
  "stellarium" :
  "tig" :
  "tmux" :
  "tree" :
  "unison-gtk" :
  "vagrant" :
  "vim" :
  "virtualbox" :
  "vlc" :
  "wajig" :
  "whois" :
  "xloadimage" :
  "xmonad" :
  "xsel" :
  "xtail" :
  "zlib1g-dev" :
  "zsh" :
  []

getInstalledPackages :: IO [String]
getInstalledPackages = do
  Stdout output <- cmd "dpkg -l"
  return $ parse output
  where
    parse =
      lines >>>
      map (stripPrefix "ii  ") >>>
      catMaybes >>> map (splitOneOf " :" >>> headMay) >>> catMaybes

installCustom :: IO ()
installCustom = do
  unit $ cmd (Cwd ".local/custom") "./install.sh"
