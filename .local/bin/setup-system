#!/usr/bin/env stack
{-
stack script
--resolver lts-13.29 --install-ghc
  --package directory
  --package filepath
  --package logging-facade
  --package MissingH
  --package safe
  --package shake
  --package split
-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE ViewPatterns #-}
{-# OPTIONS_GHC -Wall -Werror #-}

import Control.Arrow
import Data.Foldable
import Data.List
import Data.List.Split
import Data.Maybe
import Development.Shake hiding (doesFileExist, getEnv)
import Safe
import System.Directory (setCurrentDirectory)
import System.Environment
import System.FilePath
import qualified System.Logging.Facade as Log

main :: IO ()
main = do
  homeDir <- getEnv "HOME"
  setCurrentDirectory homeDir
  buildNixExecutables homeDir
  upgradeStack
  installAptPackages
  installRustExecutables
  installPythonExecutables

buildNixExecutables :: FilePath -> IO ()
buildNixExecutables homeDir = do
  unit $
    cmd
      (Cwd (homeDir </> ".local/shahn_nix_executables"))
      "./build.sh"

upgradeStack :: IO ()
upgradeStack = do
  unit $ cmd "stack upgrade"

installAptPackages :: IO ()
installAptPackages = do
  installedPackages <- getInstalledPackages
  case (packages \\ installedPackages) of
    [] -> return ()
    toBeInstalled -> do
      Log.info ("installing " ++ unwords toBeInstalled)
      unit $ cmd "sudo apt-get install -y" toBeInstalled
  where
    packages :: [String]
    packages =
      "apt-file" :
      "arandr" :
      "atool" :
      "automake" :
      "beets" :
      "build-essential" :
      "chromium-browser" :
      "cmake" :
      "cups" :
      "deborphan" :
      "dos2unix" :
      "dosbox" :
      "entr" :
      "epiphany-browser" :
      "fatsort" :
      "firefox" :
      "gdebi" :
      "geeqie" :
      "gimp" :
      "gist" :
      "git" :
      "git-cola" :
      "gitg" :
      "gitk" :
      "gnome-terminal" :
      "golang" :
      "gparted" :
      "graphviz" :
      "handbrake" :
      "htop" :
      "i3" :
      "i3lock" :
      "inkscape" :
      "inotify-tools" :
      "iotop" :
      "jnettop" :
      "jq" :
      "kcolorchooser" :
      "kig" :
      "kmag" :
      "krita" :
      "kruler" :
      "krusader" :
      "libiw-dev" :
      "librsvg2-bin" :
      "libtool-bin" :
      "libx11-dev" :
      "libx11-protocol-other-perl" :
      "libx11-windowhierarchy-perl" :
      "libxext-dev" :
      "libxft-dev" :
      "libxinerama-dev" :
      "libxpm-dev" :
      "libxrandr-dev" :
      "libxss-dev" :
      "lxde" :
      "m4" :
      "meld" :
      "mercurial" :
      "mhwaveedit" :
      "mkvtoolnix" :
      "mosh" :
      "mplayer" :
      "nethogs" :
      "net-tools" :
      "numlockx" :
      "okteta" :
      "okular" :
      "openjdk-8-jdk" :
      "openssh-server" :
      "openvpn" :
      "pavucontrol" :
      "pdftk-java" :
      "php-cli" :
      "pm-utils" :
      "postgresql-client" :
      "powertop" :
      "pv" :
      "pwgen" :
      "python3-pip" :
      "rar" :
      "redshift" :
      "renameutils" :
      "ri-li" :
      "rofi" :
      "rtorrent" :
      "screen" :
      "sgt-puzzles" :
      "sloccount" :
      "smplayer" :
      "sonata" :
      "sox" :
      "sshfs" :
      "stellarium" :
      "tig" :
      "tmux" :
      "tree" :
      "unison-gtk" :
      "upx-ucl" :
      "vagrant" :
      "vim" :
      "virtualbox" :
      "vlc" :
      "wajig" :
      "whois" :
      "xclip" :
      "xloadimage" :
      "xmonad" :
      "xsel" :
      "xtail" :
      "zlib1g-dev" :
      "zsh" :
      []

getInstalledPackages :: IO [String]
getInstalledPackages = do
  Stdout output <- cmd "dpkg -l"
  return $ parse output
  where
    parse =
      lines
        >>> map (stripPrefix "ii  ")
        >>> catMaybes
        >>> map (splitOneOf " :" >>> headMay)
        >>> catMaybes

installRustExecutables :: IO ()
installRustExecutables = do
  forM_ rustExecutables $ \(executable, features) -> do
    unit $ cmd "cargo install" executable (toFeatureFlags features)
  where
    toFeatureFlags featureMaybe = case featureMaybe of
      Nothing -> ""
      Just feature -> "--features " ++ feature

rustExecutables :: [(String, Maybe String)]
rustExecutables =
  map (\ crate -> (crate, Nothing)) withoutFeatures ++
  ("nu", Just "extra") :
  []
  where
    withoutFeatures =
      "alacritty" :
      "bottom" :
      "cargo-audit" :
      "cargo-deps" :
      "cargo-edit" :
      "cargo-expand" :
      "cargo-geiger" :
      "cargo-lichking" :
      "cargo-outdated" :
      "cargo-release" :
      "cargo-udeps" :
      "cargo-watch" :
      "cargo-whatfeatures" :
      "clog-cli" :
      "du-dust":
      "just" :
      "lsd" :
      "rust-script" :
      "sd" :
      "tracetree" :
      []

installPythonExecutables :: IO ()
installPythonExecutables = do
  (Stderr(_ :: String), Exit(_)) <- cmd "python3 -m keyring --disable"
  forM_ packages $ \ package -> do
    unit $ cmd "pip3 install --user" package
  where
    packages =
      -- "base16-shell-preview" :
      "neovim-remote" :
      "yq" :
      []
