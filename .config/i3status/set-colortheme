#!/usr/bin/env -S rust-script --toolchain-version stable --
//! ```cargo
//! [dependencies]
//! cradle = "=0.2.0"
//! dirs = "=3.0.2"
//! unindent = "=0.1.7"
//! ```

use cradle::*;
use std::collections::BTreeMap;
use std::fs;
use unindent::Unindent;

fn main() {
    let colorscheme = std::env::args().skip(1).next().unwrap();
    let StdoutUntrimmed(i3_config) = (
        ("curl", "--fail", "--silent"),
        format!(
            "https://raw.githubusercontent.com/khamer/base16-i3/master/themes/base16-{}.config",
            colorscheme
        ),
    )
        .run_output();
    let colors: BTreeMap<i32, String> = i3_config
        .lines()
        .filter_map(|line| line.strip_prefix("set $base"))
        .map(|line| {
            let mut words = line.split(' ');
            let i = i32::from_str_radix(words.next().unwrap(), 16).unwrap();
            let color = words.next().unwrap();
            (i, color.to_owned())
        })
        .collect();
    // let config = format!(
    //     "

    //     ",
    let config = format!(
        "
            general {{
              colors = true
              color_good = '{foreground}'
              color_degraded = '{error}'
              color_bad = '{error}'
              interval = 5
            }}

            order += 'memory'
            order += 'cpu_usage'
            order += 'wireless _first_'
            order += 'battery all'
            order += 'tztime local'

            wireless _first_ {{
              format_up = 'W: %ip'
              format_down = 'W: down'
            }}

            battery all {{
              format = '%status %percentage'
            }}

            tztime local {{
              format = '%Y-%m-%d %H:%M'
            }}

            cpu_usage {{
              format = 'cpu: %usage'
            }}

            disk '/' {{
              format = '%avail'
            }}

            memory {{
              format = 'Free RAM: %available'
              threshold_degraded = 10%
              threshold_critical = 5%
            }}
        ",
        // background = colors[&0],
        foreground = colors[&13],
        error = colors[&8],
    )
    .unindent();
    let dir = dirs::home_dir().unwrap().join(".config/i3status");
    fs::write(dir.join("config"), config).unwrap();
}
